(fmt nil "потоки... ")


(block "бинарные файлы"
    (if (file-exists "test.bin") (delete-file "test.bin"))

    (block
        (var out (open-file "test.bin" :mode :write))
        (write-byte out 1)
        (write-byte out 2))

    (block
        (var app (open-file "test.bin" :mode :append))
        (write-byte app (bytes 3 4 5)))

    (block
        (var in (open-file "test.bin" :mode :read))
        (assertion (= (bytes 1 2) (read-bytes in 2)) "file read bytes")
        (assertion (= 2 (stream-position in)) "stream-position")
        (assertion (= (bytes 3 4 5) (read-bytes in :ALL)) "file read all")))



(assertion (not (file-exists "test.txt")) "мешает файл test.txt")

(block "текстовые файлы"

    (block
        (var out (open-file "test.txt" :mode :write :encoding :utf32BE))
        (write-string out BOM)
        (fmt out "10 строка" NL))

    (block
        (var app (open-file "test.txt" :mode :append :encoding :utf8))
        (fmt app "20 string" NL))

    (block
        (var app (open-file "test.txt" :mode :append :encoding :cp1251))
        (fmt app "30 строка"))

    (block
        (var in (open-file "test.txt" :mode :read :encoding :BOM))
        (assertion (= "10 строка" (read-line in)) "read line 1")
        (stream-encoding in :utf8)
        (assertion (= "20 string" (read-line in)) "read line 2")
        (stream-encoding in :cp1251)
        (assertion (= "30 строка" (read-line in)) "read line 3"))


    (delete-file "test.txt")
    (exception ""
        (delete-file "test.txt")
        (error exception-class exception-message))
        )

(assertion (= "str" "str") "str")

(block "deflate"
    (var data "test data")
    (block
        (var out (file "test.deflate" :write :utf8))
        (var arch (deflate out))
        (fmt arch data))

    (block
        (var in (file "test.deflate"))
        (var arch (inflate in))
        (var data-in (read-character arch :all))
        (assertion (= data data-in) "deflate"))

    (delete-file "test.deflate")
    (exception
        (delete-file "test.deflate")
        (error)))





(log " успешно")


