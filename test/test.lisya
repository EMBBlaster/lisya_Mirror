(log \test.dlisp)
(log "русский")

(assertion T "assert T")
(assertion 1 "assert int")
(assertion 1.0 "assert float")
(assertion "S" "assert S")
(assertion \(1) "assert list")

(assertion (not nil) "not nil")
(assertion (not (not T)) "not T")
(assertion (not (not 1)) "not int")
(assertion (not (not \(1))) "not list")

(assertion (= 1 1) "= int")
(assertion (not (= 1 2)) "not = int")
(assertion (= 0.0 0.0) "= float")
(assertion (not (= 1.0 2.0)) "not = float")
(assertion (= 0.0 0) "= float int")
(assertion (not (= 0.0 1)) "not = float int")
(assertion (= "1" "1") "= str")
(assertion (not (= "1" "2")) "not = str")
(assertion (= \(1 2) \(1 2)) "= list")
(assertion (not (= \(1 1) \(1 2))) "not = list")

(assertion (= (+) 0) "+ 0")
(assertion (= (+ 1) 1) "+ un int")
(assertion (= (+ -1) -1) "+ un int neg")
(assertion (= (+ 1 2) 3) "+ bin int")
(assertion (= (+ 1 2 3) 6) "+ tr int")
(assertion (= (+ 1.0 2.0 3.0) 6.0) "+ float")

(assertion (= (- 1) -1) "- un int")
(assertion (= (- 1.0) -1.0) "- un float")
(assertion (= (- 1 3) -2) "- bin int")
(assertion (= (- 1.0 3.0) -2.0) "- bin float")

(assertion (= (*) 1) "* 1")
(assertion (= (* 1) 1) "* un int")
(assertion (= (* -1) -1) "* un int neg")
(assertion (= (* 1 2) 2) "* bin int")
(assertion (= (* 1 2 3) 6) "* tr int")
(assertion (= (* 1.0 2.0 3.0) 6.0) "* float")

(assertion (= (/ 1) 1) "/ un int")
(assertion (= (/ 2) 0.5) "/ un int float")
(assertion (= (/ 2.0) 0.5) "/ un float 2")
(assertion (= (/ 10 5) 2) "/ int")
(assertion (= (/ 9.0 2.0) 4.5) "/ float")

(assertion (= (div 12 5) 2) "div")
(assertion (= (mod 12 5) 2) "mod")

(log ABS)
(assertion (= (abs 1) 1) "abs int pos")
(assertion (= (abs -2) 2) "abs int neg")
(assertion (= (abs 3.0) 3.0) "abs float pos")
(assertion (= (abs -4.0) 4.0) "abs float neg")

(log **)
(assertion (= (** 2 3) 8) "** int int")
(assertion (= (** 2 -1) 0.5) "** int int neg")
(assertion (= (** 2.0 3.0) 8.0) "** float float")
(assertion (= (** 9.0 0.5) 3.0) "** float frac")
(assertion (= (** 2.0 -1.0) 0.5) "** float float neg")

(log SQRT)
(assertion (= (sqrt 4.0) 2.0) "sqrt")

(log ROUND)
(assertion (= (round 1.0) 1) "round 1.0")
(assertion (= (round 1.2) 1) "round 1.2")
(assertion (= (round 1.5) 2) "round 1.5")
(assertion (= (round 1.6) 2) "round 1.6")
(assertion (= (round 2.5) 2) "round 2.5")
(assertion (= (round -1.2) -1) "round -1.2")

(assertion (> 2 1) "> 2 1")
(assertion (not (> 1 1)) "not > 1 1")
(assertion (> 2.0 1.0) "> 2.0 1.0")
(assertion (not (> 1.0 1.0)) "not > 1.0 1.0")
(assertion (> "фыва" "ФЫВА") "> str")
(assertion (not (> "ФЫВА" "ФЫВА")) "not > str")

(assertion (>= 2 1) ">= 2 1")
(assertion (>= 2 2) ">= 2 2")
(assertion (not (>= 1 2)) "not >= 1 2")
(assertion (>= 2.0 1.0) ">= 2.0 1.0")
(assertion (>= 2.0 2.0) ">= 2.0 2.0")
(assertion (not (>= 1.0 2.0)) "not >= 1.0 2.0")
(assertion (>= "фыва" "ФЫВА") ">= str STR")
(assertion (>= "ФЫВА" "ФЫВА") ">= STR STR")

(assertion (< 1 2) "< 1 2")
(assertion (not (< 1 1)) "not < 1 1")
(assertion (< 1.0 2.0) "< 1.0 2.0")
(assertion (not (< 1.0 1.0)) "not < 1.0 1.0")
(assertion (< "ФЫВА" "фыва") "< str")
(assertion (not (< "ФЫВА" "ФЫВА")) "not < str")

(assertion (<= 1 2) "<= 1 2")
(assertion (<= 2 2) "<= 2 2")
(assertion (not (<= 2 1)) "not <= 2 1")
(assertion (<= 1.0 2.0) "<= 1.0 2.0")
(assertion (<= 2.0 2.0) "<= 2.0 2.0")
(assertion (not (<= 2.0 1.0)) "not <= 2.0 1.0")
(assertion (<= "ФЫВА" "фыва") "<= STR str")
(assertion (<= "ФЫВА" "ФЫВА") "<= STR STR")

(assertion (<> 1 2) "<> 1 2")
(assertion (not (<> 1 1)) "not <> 1 1")
(assertion (<> 1 2.0) "<> 1 2.0")
(assertion (<> 1.0 2.0) "<> 1.0 2.0")
(assertion (not (<> 1.0 1.0)) "not <> 1.0 1.0")
(assertion (<> "1" "2") "<> str str")
(assertion (not (<> "1" "1")) "not <> str str")

(assertion (= (length nil) 0) "length 0")
(assertion (= (length \(1 2)) 2) "length list")
(assertion (= (length "") 0) "length ''")
(assertion (= (length "figaфига") 8) "length str")

(assertion (= (elt \(0 1 2 3) 2) 2) "elt list i")
(assertion (= (elt \(0 (1) 2) 1) \(1)) "elt list l")
(assertion (= (elt "0123" 2) "2") "elt str")

(assertion (= (subseq \(0 1 2 3 4 5) 2 4) \(2 3)) "subseq list")
(assertion (= (subseq \(0 1 2 3 4 5) 2) \(2 3 4 5)) "subseq list open")
(assertion (= (subseq "012345" 2 4) "23") "subseq str")
(assertion (= (subseq "012345" 2) "2345") "subseq str open")

(assertion (= (list 0 1 2) \(0 1 2)) "list")

(assertion (= (key \(:a 1 :b 2) :a) 1) "key")
(assertion (= (key \(:a 1 :b 2) :c) nil) "key nil")

(assertion (= (concatenate \(1 2) \(3 4) \(5 6)) \(1 2 3 4 5 6)) "concat list")
(assertion (= (concatenate ) nil) "concat nil")
(assertion (= (concatenate "12" "34" "56") "123456") "concat str")

(assertion (> (length (directory "./*")) 0) "directory count")

(log \--ОПЕРАТОРЫ--)
(assertion (= (var l nil) T) "var->t")
(log \PUSH)
(assertion (= (push l 1) T) "push->T")
(assertion (= l \(1)) "push 1")
(push l 2)
(assertion (= l \(1 2)) "push 2")
(log \POP)
(assertion (= (pop l) 2) "pop 2")
(assertion (= (pop l) 1) "pop 1")
(assertion (= l nil) "l nil")

(log \MAP)
(assertion (= (map - \(4 5 6) \(1 2 3)) \(3 3 3)) "map int fun")
(assertion (= (map if \(t nil) \(1 1) \(2 2)) \(1 2)) "map op")
;здесь закончил ловлю утечек
(assertion (= (map (procedure (x) (+ 1 x)) \(1 2)) \(2 3)) "map proc")

(log \BLOCK)
(block
    (var a 1)
    (block
        (var a 2)
        (assertion (= a 2) "block internal")
        (goto :exit)
        (assertion nil "goto")
        :exit)
    (assertion (= a 1) "block outer"))

(log ">> взаимная рекурсия")
(var n 5)
(var a (procedure (n &captured b)
    (set n (- n 1))
    (if (= n 0) nil (b n))))
(var b (procedure (n &captured a)
    (a n)))
(a n)
(assertion (= n 0) "взаимная рекурсия")

(log \FOR)
(block
    (var a 0)
    (for i 5 (set a (+ a 1)))
    (assertion (= a 5) "for times"))

(block
    (var l \(1 2 3))
    (var sum 0)
    (for e l
        (set sum (+ sum e))
        (set e (+ 1 e)))
    (assertion (= l \(2 3 4)) "for-list modification")
    (assertion (= sum 6) "for var list"))

(log \WHILE)
(block
    (var a 5)
    (while (> a 0) (set a (- a 1)))
    (assertion (= a 0) "while"))

(block
    (var a 5)
    (var b 5)
    (while (> a 0)
        (set a (- a 1))
        (if (< b 3) (continue))
        (set b (- b 1)))
    (assertion (= b 2) "while continue"))

(block
    (var a 5)
    (while (> a 0)
        (set a (- a 1))
        (if (< a 3) (break)))
    (assertion (= a 2) "while break"))

(block
    (log \ELT)
    (var test (structure
        slot1 (list
            (structure slot11 "a")
            (structure slot11 "b"))
        slot2 (list
            (list "x" "y" "z")
            (list "w" "u" "v"))))

    (const index 1)

    (assertion (= (elt (elt test \slot1) 0 \slot11) "a") "elt elt")
    (assertion (= test\slot1/index\slot11 "b") "elt index")
    (assertion (= (elt (elt test \slot2) 0 index) "y") "elt elt index")
    (assertion (= test\slot2\1\2 "v") "elt")

    (log "SET ELT")
    (set test\slot1\0\slot11 "set A")
    (assertion (= test\slot1\0 (structure slot11 "set A")) "set elt")

    (log "PUSH ELT")
    (push test\slot2\0 "pushed")
    (assertion (= test\slot2\0 \("x" "y" "z" "pushed")) "push elt")

    (log "POP ELT")
    (assertion (= (pop test\slot2\1) "v") "pop elt")
    (assertion (= test\slot2\1 \("w" "u")) "poped elt"))

(block
    (log \LAST)
    (var L (list 1 2 3))
    (assertion (= (last L) 3) "last")
    (set (last L) 9)
    (assertion (= L \(1 2 9)) "set last"))

(log \STRUCTURE)
(block
    (var s0 (structure :x 0 :y 0))
    (var s1 (structure :name "s1" :value 1))
    (var s2 (structure-as s1 :name "s2"))
    (assertion (structure? s1) "structure?")
    (assertion (structure? s2 s1) "structure? s2 s1")
    (assertion (not (structure? s2 s0)) "not structure s2 s0")
    (assertion (= (elt s1 :name) "s1") "elt name")
    (assertion (= (elt s1 :value) (elt s2 :value)) "= elt s1 s2"))


(log \STREAM)
(block 
(var out (open-file "1.txt" :mode :write))
    (write-byte out 37)
    (close-file out)	
    (var in (open-file "1.txt"))
	(assertion (= 37 (read-byte in)) "file stream"))

(log \XML)
(block
    (var xml (xml:read-from-string "<out>текст</out>"))
;    (var xml (xml:read-from-string "<out><in>text</in><in>text</in>1</out>"))
    (print nil xml)
    (log))
    
    
(execute-file "../test/mod_ops_test.lisya")
(execute-file "../test/macro_test.lisya")

(log \ЗАВЕРШЕНО)
exit


