(fmt nil "высшие функции... ")


(block "режимы передачи параметров"
    (procedure Pn (a b)
        (assertion (and (= a 1) (= b 2)) "necessary"))
    (Pn 1 2)
    (procedure Po (a :optional b c)
        (assertion (and (= a 1) (= b 2) (= c nil)) "optional"))
    (Po 1 2)
    (procedure Pk (a :key b c)
        (assertion (and (= a 1) (= b nil) (= c 3)) "key"))
    (Pk 1 :c 3)
    (procedure Pf (a :flag b c)
        (assertion (and (= a 1) (= b nil) (= c T)) "flag"))
    (Pf 1 :c)
    (procedure Pr (a :rest b)
        (assertion (and (= a 1) (= b \(2 3))) "rest"))
    (Pr 1 2 3)
    (procedure P (a (b :optional c) (d :key e) (f :flag g) (h :rest i) :rest j)
        (assertion (and
            (= a 1)
            (= b 2)
            (= c nil)
            (= d 4)
            (= e 5)
            (= f 6)
            (= g T)
            (= h 8)
            (= i \(9 10))
            (= j \(11 12))) "nested"))
    (P 1 \(2) \(4 :e 5) \(6 :g) \(8 9 10) 11 12))

(block "вычисление параметров процедур"
    (procedure p (a) a)
    (assertion (= 1 (p 1)) "eval params"))

(log "")
(log "WARNING не тестируются рекурсивные процедуры")
;(block "рекурсивные процедуры"
;    (procedure p (n) (if (> n 0) (p (- n 1))))
;    (p 5))


(block "group"
    (var l \(-2 -1 0 1 2))
    (procedure not-neg (x) (>= x 0))
    (procedure not-pos (x) (<= x 0))
    (assertion (= \((2 1 0) (-1 -2) NIL) (group l not-neg not-pos)) "group int")
    (assertion (= \((2 1) (-1 -2) (0)) (group l positive? negative?)) "group"))


(block "Шейкфинкелизация"
    (procedure p (a b :rest c)
        (concatenate (list a b) c))
    (assertion (= \(1 2 3 4) (p 1 2 3 4)) "curry 1")
    (const p1 (ШФ p _ 5 6 7))
    (assertion (= \(8 5 6 7 9) (p1 8 9)) "curry 2")
    (const p2 (ШФ p1 _ 10 11))
    (assertion (= \("c" 5 6 7 10 11 12) (p2 "c" 12)) "curry 4")
    (assertion (= \("a" 5 6 7 "b") (p1 "a" "b")) "curry 3")
    )


(log " успешно")


