
(fmt nil "модифицирующие операторы... ")
(block
    (var l (list 1 2 3))
    (var su (record slot1 1 slot2 2))
    (var si "abcd")
    (var b (byte-vector 1 2 3))

    (assertion (= 2 l\1) "elt list")
    (assertion (= 1 su\slot1) "elt struct")
    (assertion (= "b" si\1) "elt string")
    (assertion (= 2 b\1) "elt byte-vector")
    (assertion (not (elt l NIL)) "elt nil")

    (assertion (= 2 (elt (list 1 2 3) 1)) "elt list val")
    (assertion (= 1 (elt (record slot1 1) \slot1)) "elt struct val")
    (assertion (= "b" (elt "abcd" 1)) "elt string val")
    (assertion (= 2 (elt (byte-vector 1 2 3) 1)) "elt byte-vector val")

    (set l\1 9)
    (assertion (= 9 l\1) "set elt list")
    (set su\slot1 9)
    (assertion (= 9 su\slot1) "set elt struct")
    (set si\1 "Q")
    (assertion (= "aQcd" si) "set elt string")
    (set b\1 9)
    (assertion (= 9 b\1) "set elt byte-vector")

    (assertion (= 3 l\last) "elt last list")
    (assertion (= "d" si\last) "elt last string")
    (assertion (= 3 b\last) "elt last byte-vector")

    (assertion (= 3 (last l)) "last list")
    (assertion (= "d" (last si)) "last string")
    (assertion (= 3 (last b)) "last byte-vector")

    (push l 4 5)
    (assertion (= 5 l\last) "push")
    (assertion (= 5 (pop l)) "pop")
    (assertion (= 4 (pop l)) "pop")

    (push l (list "a" "b"))
    (push l\last "c")
    (assertion (= (list "a" "b" "c") l\last) "push elt")
    (assertion (= "c" (pop l\last)) "pop elt")
    (assertion (= "b" (pop l\last)) "pop elt")

    (append si "ef")
    (assertion (= "aQcdef" si) "apend string")

    (set su\slot2 "ab")
    (append su\slot2 "cd")
    (assertion (= (record slot1 9 slot2 "abcd") su) "append elt")

    (var LL (list 0 (record slot "text")))
    (assertion (= "x" (elt (last LL) \slot 2)) "elt/last nested"))


(block
    (var a 1)
    (procedure p (x) (set x (+ 1 x)))
    (p a)
    (assertion (= 2 a) "proc var")
    (var b (list 1 2 3))
    (p b\1)
    (assertion (= 3 b\1) "proc elt var")

    (procedure pp (x) (procedure () (set x 8)))
    (const setx8 (pp b/2))
    (setx8)
    (assertion (= (list 1 3 8) b) "capture elt"))


(block "FOR sequence modifucation"
    (var l (list 1 2 3))
    (var s "string")
    (var b (byte-vector 1 2 3))

    (assertion (= nil (for e l (set e (+ 1 e)))) "for full")
    (assertion (= (list 2 3 4) l) "for list modification")
    (assertion (= 3 (for e l (if (= 3 e) (break)))) "for break")

    (for b b (set b (+ 1 b)))
    (assertion (= (byte-vector 2 3 4) b) "for byte-vector modification")

    (for c s (set c "-"))
    (assertion (= "------" s) "for string modification"))

(block "DELETE"
    (var L \(1 2 3 4 5))
    (delete L 1)
    (assertion (= \(1 3 4 5) L) "delete n")
    (delete L \(0 2))
    (assertion \(= \(3 5) L) "delete nn")
    (delete L 0..2)
    (assertion (= nil L) "delete range")
    (set L \(1 2 3))
    (procedure p (l) \(0 2))
    (delete L p)
    (assertion (= \(2) L) "delete proc")

    "проверка на побочные эффекты"
    (var LL \((1 1) (2 2) (3 3)))
    (var LL2 LL)
    (delete LL2/1 0)
    (assertion (= \((1 1) (2 2) (3 3)) LL) "delete elt")
    (assertion (= \((1 1) (2) (3 3)) LL2) "delete elt 2"))

(block "INSERT"
    (var L \(1 2))
    (INSERT L 0 9)
    (assertion (= \(9 1 2) L) "insert 0")
    (INSERT L 3 8)
    (assertion (= \(9 1 2 8) L) "insert last")
    (INSERT L 1 7)
    (assertion (= \(9 7 1 2 8) L) "insert")
    (procedure p (l) 2)
    (INSERT L p 6)
    (assertion (= \(9 7 6 1 2 8) L) "insert proc")

    "проверка на побочные эффекты"
    (var LL \((0 0) (1 1) (2 2)))
    (var LL2 LL)
    (var LL3 LL2/1)
    (INSERT LL2/1 1 3)
    (assertion (= \((0 0) (1 3 1) (2 2)) LL2) "insert side")
    (assertion (= \((0 0) (1 1) (2 2)) LL) "insert side 2")
    (assertion (= \(1 1) LL3) "insert side 3"))


(block "проверка на побочные эффекты"
    (block "SET"
        (var a (list 1 (record s0 2 s1 (list 3 4))))
        (var b a)
        (set b\1\s1\1 9)
        (assertion (= a \(1 #R(S0 2 S1 (3 4)))) "set side"))

    (block "APPEND"
        (var a (list 1 (record s0 2 s1 (list 3 4))))
        (var b a)
        (append b\1\s1 \(6 7))
        (assertion (= a \(1 #R(S0 2 S1 (3 4)))) "append side")

        (var L1 (list (byte-vector 1)))
        (var L2 L1)
        (append L1/0 (byte-vector 2))
        (assertion (= (list (byte-vector 1 2)) L1) "append side bv")
        (assertion (= (list (byte-vector 1)) L2) "append side bv 2")

        (var L3 (list "a"))
        (var L4 L3)
        (append L3/0 "b")
        (assertion (= (list "ab") L3) "append side str")
        (assertion (= (list "a") L4) "append side str 2"))

    (block "DEFAULT"
        (var a (list 1 (record s0 2 s1 (list 3 nil))))
        (var b a)
        (procedure p (x) (default x 7))
        (p b\1\s1\1)
        (assertion (= a \(1 #R(S0 2 S1 (3 nil)))) "default side"))

    (block "FOR"
        (var a (list 1 (record s0 2 s1 (list 3 4))))
        (var b a)
        (for e b\1\s1 (set e 7))
        (assertion (= a \(1 #R(S0 2 S1 (3 4)))) "for side")

        (var L1 \((1 2)))
        (var L2 L1)
        (for e L1/0 (set e 0))
        (assertion (= \((1 2)) L2) "for side 2")
        (assertion (= \((0 0)) L1) "for side 3"))

    (block "POP"
        (var a (list 1 (record s0 2 s1 (list 3 4))))
        (var b a)
        (pop b\1\s1)
        (assertion (= a \(1 #R(S0 2 S1 (3 4)))) "pop side"))

    (block "PUSH"
        (var a (list 1 (record s0 2 s1 (list 3 4))))
        (var b a)
        (push b\1\s1 7)
        (assertion (= a \(1 #R(S0 2 S1 (3 4)))) "push side")))

(log " успешно")


