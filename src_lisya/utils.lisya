(package utils (
    inc
    dec
    parse)

(procedure inc (i) (set i (+ i 1)))

(procedure dec (i) (set i (- i 1)))

(procedure parse (rules s)
    "Разбирает переданную строку в соответствии с заданными правилами"
    (var tokens)
    (var acc "")
    (var mode (car (car rules)))
    (var i 0)
    (while (< i (length s))
        (if (for selector (associations rules mode :lazy :by-head)
            (const expr (concatenate "^" (car selector)))
            (const token (head (regexp:match s expr :from i)))
            (when token
                (set i (+ i (length token)))
                (for cmd (subseq selector 1)
                    (cond
                        ((keyword? cmd) (set mode cmd))
                        ((string? cmd) (push tokens cmd))
                        ((integer? cmd) (set i (+ i cmd)))
                        ((= \return cmd) (set i (- i (length token))))
                        ((= \accumulate cmd) (append acc token))
                        ((= \token cmd) (push tokens acc) (set acc ""))
                        ((= \significant-token cmd) (when (not (empty? acc))
                                                (push tokens acc) (set acc "")))
                        ((= \error cmd) (error "strutils:parser" token))
                        ((= \trim cmd) (set acc (trim acc)))
                        (t (error "strutils:parser" "command " cmd " not supported"))))
                (break)))
            nil
            (error "strutils:parser" "selector not found in " mode " at " (subseq s i))))
    (if (<> "" acc) (push tokens acc))
    tokens)

)
