(package xlsx (
    xlsx_open
    )
    (use xml)

    (const attr 1)
    (const text 2)

    (const column-indices \(
     A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
    AA AB AC AD AE AF AG AH AI AJ AK AL AM AN AO AP AQ AR AS AT AU AV AW AX AY AZ
    BA BB BC BD BE BF BG BH BI BJ BK BL BM BN BO BP BQ BR BS BT BU BV BW BX BY BZ
    CA CB CC CD CE CF CG CH CI CJ CK CL CM CN CO CP CQ CR CS CT CU CV CW CX CY CZ))


    (procedure digit-pos (s)
        (for i (range s)
            (when (member \("0" "1" "2" "3" "4" "5" "6" "7" "8" "9") s/i)
                (break))))

    (procedure col-symbol (s) (symbol (subseq s 0 (digit-pos s))))
    (procedure row-number (s) (read (subseq s (digit-pos s))))

    (procedure decode-dimension (s d)
        (const (left-top :optional right-bottom) (split-string s ":"))
        (case d
            (r (block
                (const top (row-number left-top))
                (list top (if right-bottom (row-number right-bottom) top))))
            (c (block
                (const left (col-symbol left-top))
                (list left (if right-bottom (col-symbol right-bottom) left))))))

    (procedure find-row-index (tag r)
        (for e (range 2 tag)
            (if (and (= "row" (car tag/e)) (= (fmt t r) (key tag/e/1 "r")))
                (break))))

    (procedure find-cell-index (tag c r)
        (for e (range 2 tag)
            (if (and (= "c" (car tag/e)) (= (fmt t c r) (key tag/e/1 "r")))
                (break))))

    (procedure row (r) (curry find-row-index _ r))
    (procedure cell (c r) (curry find-cell-index _ c r))
    (procedure tag-v (tag) (for e (range 2 tag) (if (= "v" (car tag/e)) (break))))


    (procedure xlsx_open (fn)
        (var z (ZIP:OPEN fn :mode :append))
        (var streams)
        (var sheets)
        (for fn (sort (ZIP:FILELIST z))
            (when (= 0 (position fn "xl/worksheets/"))
                (var f (ZIP:FILE z fn))
                (push streams f)
                (push sheets (XML:READ f))))
        (var f-sharedStrings (ZIP:FILE z "xl/sharedStrings.xml"))
        (var sharedStrings (if f-sharedStrings (XML:READ f-sharedStrings)))
        (procedure str (n) (elt sharedStrings (tag "si" n) (tag "t") 2))
        (procedure cell-val (cell)
            (when cell (case (key cell/attr "t")
                ("s" (str (key cell/attr (read "s"))))
                (t (read cell/tag-v/text)))))
        (record
            \cell (procedure (s c r)
                (cell-val (elt sheets/s (tag "sheetData") (row r) (cell c r))))
            ;\set-cell (procedure (s c r v)
            ;    (set (elt sheets/s (tag "sheetData")
            ;        (row r) (cell c r) tag-v 2)
            ;        (fmt t v)))
            \columns (procedure (s)
                (const (left right) (decode-dimension
                    (key (elt sheets/s (tag "dimension") attr) "ref") \c ))
                (subseq column-indices
                    (position column-indices left)
                    (+ 1 (position column-indices right))))
            \rows (procedure (s)
                (const (top bottom) (decode-dimension
                    (key (elt sheets/s (tag "dimension") attr) "ref") \r ))
                (range top (+ 1 bottom)))
            \sheets (range sheets)
            \save (procedure ()
                (for s (range streams)
                    (stream-length streams/s 0)
                    (XML:WRITE streams/s sheets/s))
                (stream-length f-sharedStrings 0)
                (if f-sharedStrings (XML:WRITE f-sharedStrings sharedStrings)))))



)



